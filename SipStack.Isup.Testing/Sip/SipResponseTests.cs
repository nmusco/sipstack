using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SipStack.Tests.Sip
{
    using System.Globalization;

    using NUnit.Framework;

    [TestFixture]
    public class SipResponseTests
    {
        const string Sip100TryingMessage = @"SIP/2.0 100 Trying
Allow: INVITE,BYE,REGISTER,ACK,OPTIONS,CANCEL,INFO,SUBSCRIBE,NOTIFY,REFER,UPDATE
Call-ID: a9c94f06-3e2a-44e4-9aa9-f4fade6acce4@10.0.5.25
Contact: <sip:15499@10.0.8.44:5060>
CSeq: 2 INVITE
From: <sip:11992971721@10.0.5.25:5060;user=phone>
Session-ID: 00eb85ce7b1eecd704d50bf2ebc8e2e7
Supported: 100rel,timer,replaces
To: <sip:15499@10.0.8.44:5060;user=phone>
Via: SIP/2.0/UDP 10.0.5.25:5060;received=10.0.5.25;branch=z9hG4bK7fe8d1cf26e4571fa4
Content-Length: 0";

        [TestCase(Sip100TryingMessage)]
        public void Parse100Trying(string msg)
        {
            var bytes = Encoding.Default.GetBytes(msg);
            var result = SipMessage.Parse(bytes);
        }

        [Test]
        public void Parse183SessionProgress()
        {
            const string hexData =
                "5349502f322e30203138332053657373696f6e2050726f67726573730d0a416c6c6f773a20494e564954452c4259452c52454749535445522c41434b2c4f5054494f4e532c43414e43454c2c494e464f2c5355425343524942452c4e4f544946592c52454645522c5550444154450d0a43616c6c2d49443a2033646534363232302d343038622d343065302d386164612d3436393366616530386437394031302e302e352e32350d0a436f6e746163743a203c7369703a31353439394031302e302e382e34343a353036303e0d0a436f6e74656e742d547970653a206d756c7469706172742f6d697865643b626f756e646172793d756e697175652d626f756e646172792d310d0a435365713a203220494e564954450d0a46726f6d3a203c7369703a31313939323937313732314031302e302e352e32353a353036303b757365723d70686f6e653e0d0a526571756972653a2031303072656c0d0a525365713a20310d0a53657373696f6e2d49443a2030316538316263313366363434356262646130313161633866376431323564330d0a537570706f727465643a2074696d65722c7265706c616365730d0a546f3a203c7369703a31353439394031302e302e382e34343a353036303b757365723d70686f6e653e3b7461673d363833312d463133330d0a5669613a205349502f322e302f5544502031302e302e352e32353a353036303b72656365697665643d31302e302e352e32353b6272616e63683d7a39684734624b3766653864316366323864333831383631660d0a436f6e74656e742d4c656e6774683a203430380d0a0d0a2d2d756e697175652d626f756e646172792d310d0a436f6e74656e742d547970653a206170706c69636174696f6e2f7364700d0a0d0a763d300d0a6f3d2d2039203020494e204950342031302e302e382e34340d0a733d2d0d0a633d494e204950342031302e302e382e34340d0a743d3020300d0a6d3d617564696f203130303136205254502f4156502038203130310d0a613d7274706d61703a382050434d412f383030300d0a613d7274706d61703a3130312074656c6570686f6e652d6576656e742f383030300d0a613d666d74703a31303120302d31350d0a613d7074696d653a32340d0a613d73656e64726563760d0a0d0a2d2d756e697175652d626f756e646172792d310d0a436f6e74656e742d547970653a206170706c69636174696f6e2f495355503b76657273696f6e3d6974752d7439322b3b626173653d6e7876330d0a436f6e74656e742d446973706f736974696f6e3a207369676e616c3b68616e646c696e673d6f7074696f6e616c0d0a0d0a06120001290101000d0a2d2d756e697175652d626f756e646172792d312d2d0d0a";

            var binaryData = hexData.ToByteArray().ToArray();

            var response = SipMessage.Parse(binaryData);
        }
    }

    public static class StringExtensions
    {
        public static IEnumerable<byte> ToByteArray(this string str)
        {
            if ((str.Length % 2) != 0)
            {
                throw new InvalidOperationException("string is not even");
            }

            for (var i = 0; i < str.Length; i+=2)
            {
                yield return byte.Parse(str[i].ToString() + str[i + 1], NumberStyles.AllowHexSpecifier);
            }
        }
    }
}
